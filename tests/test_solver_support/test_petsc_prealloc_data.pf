!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
@test
subroutine test_petsc_prealloc_data
    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use petsc_preallocation_data_class
    use sparse_row_data_class
    use support_types
    implicit none
    
    type(partition) :: testPart
    type(grid) :: testGrid
    type(variableList) :: testList
    type(indexing) :: testIndexing
    type(petscPreallocationData) :: testPreallocData 
    type(sparseRowData) ,dimension(2) :: testRowData
    integer(ik) ,dimension(:) ,allocatable :: rows 
    type(intArray) ,dimension(:) ,allocatable :: colVecs 

    integer(ik) :: i

    rows = [6,7,8,9,10]
    colVecs = [intArray([5,6]),intArray([6,7]),intArray([7,8]),intArray([8,9]),intArray([9,10])]

    call testRowData(1)%init(rows,colVecs)

    rows = [6,7,8,9,10]
    colVecs = [intArray([6,7]),intArray([7,8]),intArray([8,9]),intArray([9,10]),intArray([10,11])]

    call testRowData(2)%init(rows,colVecs)

    call testPart%initSimplePartition(4,1,20,1)
    call testGrid%init(real([(i,i=1,20)],kind=rk),real([(i,i=1,10)],kind=rk),0,0)

    call testList%init()

    call testList%addVar("n")

    call testIndexing%init(testPart,testGrid,testList)

    call testPreallocData%init(testIndexing,1)

    @assertFalse(testPreallocData%isAssembled())
    
    call testPreallocData%addRowDataToPattern(testRowData(1))
    call testPreallocData%addRowDataToPattern(testRowData(2))

    call testPreallocData%assembleData()
  
    @assertTrue(testPreallocData%isAssembled())

    @assertEqual(testPreallocData%getNumNonzerosDiag(),[2,3,3,3,2])
    @assertEqual(testPreallocData%getNumNonzerosOffDiag(),[1,0,0,0,1])

end subroutine test_petsc_prealloc_data