!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_fluid_gen1d_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use geometry_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use matrix_term_abstract_class
    use support_functions
    use mpi_controller_class
    use modelbound_data_varlike_class
    use model_surrogate_class
    use fluid_gen1d_class
    use general_mat_term_class
    use stencil_class
    use stencil1d_class

    implicit none

    type ,extends(Derivation) ,public :: TestDerivation 

        contains 

        procedure ,public :: calculate => testCalculate

    end type TestDerivation

    type ,extends(modelSurrogate) ,public :: dummyModel 

    end type dummyModel

contains

    @test( npes=[8])
    subroutine test_fluid_gen1d(this)
    
        type(partition) :: testPart
        type(Geometry) :: testGeometry
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived,testMBList
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(0) :: cRules
        type(calculationRule) ,dimension(1) :: mbRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(FluidStencilGen1D) :: stencilGen
        type(Stencil1D) :: testStencil
        type(StencilTemplate) :: testTemplate
        type(RealArray) ,allocatable ,dimension(:) :: colVals
        type(StringArray) ,allocatable ,dimension(:) :: colVarContVars,mbVars
        type(DummyModel) :: dummyM
        type(ModelboundDataVarlike) :: testMBData
        type(TestDerivation) :: testDeriv

        integer(ik) :: i ,j
        integer(ik) :: minX ,maxX ,minH

        integer(ik) ,allocatable ,dimension(:,:) :: rowCoords

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),1,0)
        call testGeometry%init(real([(0.5d0*i,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk))
        call testList%init()
        call testList%addVar("n")
        call testList%addVar("n1")
        call testList%addVar("n2")
        call testList%addVar("n3")

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call testStencil%init([-1,0,1])
        allocate(colVals(3))

        do i =1,3
            colVals(i)%entry = [(real((i-1)*12+j,kind=rk),j=1,12)]
        end do

        minX = testPart%getMinXAtInd(testController%getWorldRank()+1)
        maxX = testPart%getMaxXAtInd(testController%getWorldRank()+1)

        call testDeriv%makeDefined()
        call mbRules(1)%init(testDeriv,[stringArray("n")])
        call testMBList%init()

        call testMBList%addVar("mbvar")

        call testMBData%init(testMBList,mbRules,testPart,testIndexing,1,testVarCont1,testController%getWorldRank())

        colVarContVars = [StringArray("n1"),StringArray("n2"),StringArray("n3")]
        allocate(mbVars(3))
        mbVars(2)%string="mbvar"
        call stencilGen%init(testStencil,colVals,colVarContVars,mbVars&
                            ,coordInterval=[minX,maxX])

        allocate(testTemplate%stencilGen,source = stencilGen)

        allocate(rowCoords(1,12))
        rowCoords(1,:) = [(i,i=1,12)]
        testTemplate%rowCoords = rowCoords
        call testTemplate%defaultStencil%init(xStencil=[-1,0,1])

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),&
                          "n","n",testVarCont1,testTemplate)
        
        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)
        testVarCont1%variables(2)%entry = real([1,1,1,1,1],kind=rk)
        testVarCont1%variables(3)%entry = real([2,2,2,2,2],kind=rk)
        testVarCont1%variables(4)%entry = real([3,3,3,3,3],kind=rk)
       
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1) 

        call testMBData%update(dummyM,testVarCont1)
        call testTerm%update(testVarCont1,modelData=testMBData)
        call testTerm%calculateValues(testVarCont1)
        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec(0:4))
        checkVec = 0
        if (minH == 1) then
            do i = 1,3
                checkVec(i) = testVarCont1%variables(1)%entry(i-1)*colVals(1)%entry(minX-1+i)*testVarCont1%variables(2)%entry(i) +&
                            2*testVarCont1%variables(1)%entry(i)**2*colVals(2)%entry(minX-1+i)*testVarCont1%variables(3)%entry(i) +&
                                testVarCont1%variables(1)%entry(i+1)*colVals(3)%entry(minX-1+i)*testVarCont1%variables(4)%entry(i) 
            end do

            if (maxX == 12) checkVec(3) = &
                                testVarCont1%variables(1)%entry(2)*colVals(1)%entry(maxX)*testVarCont1%variables(2)%entry(3) +&
                                2* testVarCont1%variables(1)%entry(3)**2*colVals(2)%entry(maxX)*testVarCont1%variables(3)%entry(3)

            if (minX == 1) checkVec(1) = &
                                2*testVarCont1%variables(1)%entry(1)**2*colVals(2)%entry(minX)*testVarCont1%variables(3)%entry(1) +&
                                testVarCont1%variables(1)%entry(2)*colVals(3)%entry(minX)*testVarCont1%variables(4)%entry(1)
        end if
        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_fluid_gen1d

    module function testCalculate(this,inputArray,indices) result(output)

        class(testDerivation)               ,intent(inout) :: this
        type(realArray)       ,dimension(:) ,intent(in) :: inputArray 
        integer(ik)           ,dimension(:) ,intent(in) :: indices
        real(rk) ,allocatable ,dimension(:)             :: output

        output = 2*inputArray(indices(1))%entry 

    end function testCalculate

end module test_fluid_gen1d_term

