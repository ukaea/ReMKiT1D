!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_grid_inits

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use support_types 
    use initialization_support
    use json_controller_class
    use mpi_controller_class
    use key_names

    implicit none

contains

    @test( npes=[8])
    subroutine test_grid_json(this)

        class (MpiTestMethod), intent(inout) :: this
        type(Grid) :: testGrid1, testGrid2
        integer(ik) :: i 

        type(NamedRealArray) ,allocatable ,dimension(:) :: realArrayParams
        type(MPIController) :: testMPIController 
        type(JSONController) :: testJSONController

        type(NamedRealArray) ,allocatable ,dimension(:) :: gridPoints ,cellWidth
        type(NamedInteger) ,allocatable ,dimension(:) :: intParams
        type(NamedLogical) ,dimension(2) :: constructGridFromWidths
        real(rk) ,allocatable ,dimension(:) :: usedVGrid ,usedXGrid


        call testMPIController%init(4,2)   

        allocate(gridPoints(2))

        gridPoints(1)%name = keyXGrid//"."//keyCellCoords
        gridPoints(2)%name =keyVGrid//"."//keyCellCoords

        gridPoints(1)%values = real([(i,i=1,10)],kind=rk)
        gridPoints(2)%values = real([(i,i=1,10)],kind=rk)

        allocate(cellWidth(2))

        cellWidth(1)%name = keyXGrid//"."//keyCellWidths
        cellWidth(2)%name = keyVGrid//"."//keyCellWidths

        cellWidth(1)%values = real([(i + (i-1)*0.1d00,i=1,10)],kind=rk)
        cellWidth(2)%values = real([(i,i=1,10)],kind=rk)

        constructGridFromWidths(1) = NamedLogical(keyXGrid//"."//keyBuildFromWidths,.false.)
        constructGridFromWidths(2) = NamedLogical(keyVGrid//"."//keyBuildFromWidths,.false.)

        allocate(intParams(2))

        intParams(1) = NamedInteger(keyVGrid//"."//keyMaxL,3)
        intParams(2) = NamedInteger(keyVGrid//"."//keyMaxM,0)

        call testJSONController%loadFile(testMPIController)
        call testJSONController%output(gridPoints)
        call testJSONController%output(cellWidth)
        call testJSONController%output(constructGridFromWidths)
        call testJSONController%output(intParams)

        call initGridFromJSON(testGrid1,testJSONController,testMPIController)
        call testJSONController%closeFile(testMPIController,saveFile=.true.)

        @assertEqual(testGrid1%getXGrid(),gridPoints(1)%values)
        @assertEqual(testGrid1%getVGrid(),gridPoints(2)%values)
        @assertEqual(testGrid1%getMaxL(),3)
        @assertEqual(testGrid1%getMaxM(),0)
        @assertEqual(testGrid1%getNumH(),4)
        @assertEqual(testGrid1%getNumX(),10)
        @assertEqual(testGrid1%getNumV(),10)

        @assertEqual(testGrid1%getLGrid(),[0,1,2,3])
        @assertEqual(testGrid1%getMGrid(),[0,0,0,0])
        @assertEqual(testGrid1%getHarmonicIm(),[0,0,0,0]>0)
        @assertEqual(testGrid1%getH(2,0,.false.),3)

        allocate(usedXGrid(10))
        allocate(usedVGrid(10))

        usedXGrid(1) = cellWidth(1)%values(1)/2

        do i = 2, size(usedXGrid)
            usedXGrid(i) = usedXGrid(i-1) + cellWidth(1)%values(i-1)/2 + cellWidth(1)%values(i)/2
        end do

        usedVGrid(1) = cellWidth(2)%values(1)/2

        do i = 2, size(usedVGrid)
            usedVGrid(i) = usedVGrid(i-1) + cellWidth(2)%values(i-1)/2 + cellWidth(2)%values(i)/2
        end do

        constructGridFromWidths(1) = NamedLogical(keyXGrid//"."//keyBuildFromWidths,.true.)
        constructGridFromWidths(2) = NamedLogical(keyVGrid//"."//keyBuildFromWidths,.true.)

        call testJSONController%loadFile(testMPIController)
        call testJSONController%output(constructGridFromWidths)
        call initGridFromJSON(testGrid2,testJSONController,testMPIController)
        call testJSONController%closeFile(testMPIController,saveFile=.true.)

        @assertEqual(testGrid2%getXGrid(),usedXGrid)
        @assertEqual(testGrid2%getVGrid(),usedVGrid)
    end subroutine test_grid_json

    @test( npes=[8])
    subroutine test_part_json(this)

        class (MpiTestMethod), intent(inout) :: this
        type(Partition) :: testPart
        type(Grid) :: testGrid
        integer(ik) :: i 

        type(NamedRealArray) ,allocatable ,dimension(:) :: realArrayParams
        type(MPIController) :: testMPIController 
        type(JSONController) :: testJSONController

        type(NamedRealArray) ,allocatable ,dimension(:) :: gridPoints
        type(NamedInteger) ,allocatable ,dimension(:) :: intParams
        type(NamedLogical) ,dimension(2) :: constructGridFromWidths


        call testMPIController%init()   

        allocate(gridPoints(2))

        gridPoints(1)%name = keyXGrid//"."//keyCellCoords
        gridPoints(2)%name =keyVGrid//"."//keyCellCoords

        gridPoints(1)%values = real([(i,i=1,12)],kind=rk)
        gridPoints(2)%values = real([(i,i=1,10)],kind=rk)
        allocate(intParams(4))

        intParams(1) = NamedInteger(keyVGrid//"."//keyMaxL,3)
        intParams(2) = NamedInteger(keyVGrid//"."//keyMaxM,0)
        intParams(3) = NamedInteger(keyMPI//"."//keyNumPX,4)
        intParams(4) = NamedInteger(keyMPI//"."//keyNumPH,2)

        constructGridFromWidths(1) = NamedLogical(keyXGrid//"."//keyBuildFromWidths,.false.)
        constructGridFromWidths(2) = NamedLogical(keyVGrid//"."//keyBuildFromWidths,.false.)

        call testJSONController%loadFile(testMPIController)
        call testJSONController%output(gridPoints)
        call testJSONController%output(intParams)
        call testJSONController%output(constructGridFromWidths)

        call initGridFromJSON(testGrid,testJSONController,testMPIController)

        call initPartFromJSON(testPart,testGrid,testJSONController,testMPIController)
        call testJSONController%closeFile(testMPIController,saveFile=.true.)

        @assertEqual(testPart%getLocNumX(),[(3, i=1,8)])
        @assertEqual(testPart%getLocNumH(),[(2, i=1,8)])
        @assertEqual(testPart%getMinX(),[1,1,4,4,7,7,10,10])
        @assertEqual(testPart%getMaxX(),[3,3,6,6,9,9,12,12])
        @assertEqual(testPart%getMinH(),[1,3,1,3,1,3,1,3])
        @assertEqual(testPart%getMaxH(),[2,4,2,4,2,4,2,4])

        @assertEqual(testPart%findProc(6,3),4)
        @assertEqual(testPart%findProc(3,3),2)
    end subroutine test_part_json

    @test( npes=[8])
    subroutine test_geometry_json(this)

        class (MpiTestMethod), intent(inout) :: this
        type(Geometry) :: testGeometry
        type(Grid) :: testGrid
        integer(ik) :: i 

        type(NamedRealArray) ,allocatable ,dimension(:) :: realArrayParams
        type(MPIController) :: testMPIController 
        type(JSONController) :: testJSONController

        type(NamedRealArray) ,allocatable ,dimension(:) :: gridPoints ,jacobians
        type(NamedInteger) ,allocatable ,dimension(:) :: intParams
        type(NamedLogical) ,dimension(2) :: constructGridFromWidths
        type(NamedLogical) ,dimension(1) :: periodicGrid

        call testMPIController%init()   

        allocate(gridPoints(2))

        gridPoints(1)%name = keyXGrid//"."//keyCellCoords
        gridPoints(2)%name =keyVGrid//"."//keyCellCoords

        gridPoints(1)%values = real([(i-0.5d00,i=1,12)],kind=rk)
        gridPoints(2)%values = real([(i,i=1,10)],kind=rk)

        allocate(jacobians(1))

        jacobians(1)%name = keyXGrid//"."//keyFaceJacobians
        jacobians(1)%values = real([(i,i=1,13)],kind=rk)

        allocate(intParams(2))

        intParams(1) = NamedInteger(keyVGrid//"."//keyMaxL,3)
        intParams(2) = NamedInteger(keyVGrid//"."//keyMaxM,0)

        constructGridFromWidths(1) = NamedLogical(keyXGrid//"."//keyBuildFromWidths,.false.)
        constructGridFromWidths(2) = NamedLogical(keyVGrid//"."//keyBuildFromWidths,.false.)

        periodicGrid(1) = NamedLogical(keyXGrid//"."//keyPeriodic,.true.)

        call testJSONController%loadFile(testMPIController)
        call testJSONController%output(gridPoints)
        call testJSONController%output(jacobians)
        call testJSONController%output(intParams)
        call testJSONController%output(constructGridFromWidths)

        call initGridFromJSON(testGrid,testJSONController,testMPIController)

        call initGeometryFromJSON(testGeometry,testGrid,testJSONController,testMPIController)
        call testJSONController%closeFile(testMPIController,saveFile=.true.)

        @assertEqual(testGeometry%getCellWidths(),real([(1,i=1,12)],kind=rk))
        @assertEqual(testGeometry%getJacobianCentre(),real([(i+0.5d00,i=1,12)],kind=rk))

        
    end subroutine test_geometry_json


end module test_grid_inits

