!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_moment_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use v_space_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use matrix_term_abstract_class
    use support_functions
    use mpi_controller_class
    use model_surrogate_class
    use initialization_support
    use multiplicative_generator_core_class
    use multiplicative_stencil_generator_class
    use general_mat_term_class


contains

    @test( npes=[8])
    subroutine test_m_term(this)
    
        type(partition) :: testPart
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived
        type(indexing) :: testIndexing
        type(VSpace) :: testVSpace
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(0) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(StencilTemplate) :: templateObj 
        type(MultiplicativeStencilGen) :: stencilGen
        type(MultiplicativeGeneratorCore) ,allocatable :: stencilCore
        type(VarData) :: vData
        integer(ik) :: i 

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(0.1d0*i,i=1,10)]-0.05d0,kind=rk),1,0)
        call testVSpace%init(testGrid)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("f",.true.)

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call templateObj%defaultStencil%init(hStencil=[1],vStencil=[(i,i=1,10)],mapToDist=.true.)
        templateObj%rowCoords = allCombinations([IntArray([(i,i=1,12)])])
        allocate(stencilCore)
        call stencilCore%init(testGrid,testPart,testController%getWorldRank(),templateObj%rowCoords,&
                              fixedVVals=4*pi*testGrid%getVGrid()**4*testVSpace%getVCellWidths())

        templateObj%fixedStencil = .true.

        call stencilGen%init(stencilCore,initXVals=jaggedArray(reshape(real([(1,i=1,3)],kind=rk),[1,3])),&
                                        initHVals=jaggedArray(reshape(real([(1,i=1,2)],kind=rk),[1,2])),&
                                        initVVals=jaggedArray(reshape(real([(1,i=1,10)],kind=rk),[1,10])))

        allocate(templateObj%stencilGen,source=stencilGen)
        templateObj%fixedStencil = .true.

        vData%rowVars=[stringArray("n")]
        vData%rowVarPowers = [2.0d0]

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),&
                          "n","f",testVarCont1,templateObj,vData=vData)

        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)

        do i = 1,2
            call setDistHarmonic(testVarCont1%variables(2)%entry,i,real([1,2,3,4,5],kind=rk),[(real([1],kind=rk),i=1,10)])
        end do

        call testTerm%calculateValues(testVarCont1)

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec(5))
        checkVec = 0 
        if (testPart%getMinHAtInd(testController%getWorldRank()+1) == 1) &
        checkVec = testVSpace%calculateMoment(testVarCont1%variables(2)%entry,1,2)*testVarCont1%variables(1)%entry**2

        checkVec(1) = 0
        checkVec(5) = 0
        @assertEqual(testVec,checkVec,tolerance=1.d-13)
        
    end subroutine test_m_term

end module test_moment_term

