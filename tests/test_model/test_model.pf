!TODO: test update function and petsc calls here or elsewhere to improve coverage 
!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_model

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use term_abstract_class
    use test_matrix_term_class
    use matrix_term_abstract_class
    use support_functions
    use test_explicit_term_class
    use test_operator_class
    use model_class
    use mpi_controller_class
    use petsc_controller_class

    implicit none

    type ,extends(derivation) ,public :: testDerivation 

        contains 

        procedure ,public :: calculate => testCalculate

    end type testDerivation

contains

    @test( npes=[8])
    subroutine test_basic_model(this)

        class (MpiTestMethod), intent(inout) :: this
        type(MPIController) :: testMPIController 
        type(petscController) :: testPETScController 
        type(solverOptions) :: solOptions 

        type(partition) :: testPart
        type(grid) :: testGrid
        type(variableList) :: testList ,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont
        type(calculationRule) ,dimension(0) :: cRules
        class(matrixTerm) ,allocatable :: matTerm
        class(term) ,allocatable :: genTerm
        type(testMatrixTerm) :: testTerm1
        type(testExplicitTerm) :: testTerm2
        type(model) :: testModel
        type(testOperator) :: testOp

        integer(ik) :: i

        call testMPIController%init(8,1)

        call testPart%initSimplePartition(8,1,24,1)
        call testGrid%init(real([(i,i=1,12)],kind=rk),real([(i,i=1,5)],kind=rk),0,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)
        solOptions%kspSolverType = "bcgs"
        solOptions%hyprePC = "euclid"
        solOptions%petscOptions = ""

        call testPETScController%init(testIndexing,testMPIController,solOptions) 

        call testVarCont%init(testList,testListDerived,cRules,testIndexing,testPart,1,testMPIController%getWorldRank())
        call testModel%init(1,1,2,2)

        if (testMPIController%getWorldRank() == 1) then
            call testTerm1%makeDefined()

            call testTerm1%setEvolvedAndImplicitVar("n","u",testVarCont)
            call testTerm1%setReqVars([stringArray("n"),stringArray("u")],[stringArray("u")],testVarCont)
            call testTerm1%initRowData(reshape([4,5,6],[1,3]),testMapping,testIndexing)

            allocate(matTerm,source=testTerm1)

            call testTerm2%init("n",testVarCont)

            call testTerm2%setEvolvedVar("n")

            call testTerm2%setOperator(testOp)

            allocate(genTerm,source=testTerm2)

            call testModel%addImplicitTerm(matTerm,[1],[2],"name")
            call testModel%addGeneralTerm(genTerm,[1,2],"name")
            call testModel%assemble(testPETScController)

            testVarCont%variables(1)%entry = real([1.0,2.0,3.0,4.0,5.0],kind=rk)
            testVarCont%variables(2)%entry = real([1.0,4.0,5.0,6.0,7.0],kind=rk)
            call testModel%calculateMatGroupValues(1,testVarCont)
            @assertEqual(testModel%evaluateTermGroup(1,testVarCont),real([0.0,208.0,780.0,1776.0,0.0],kind=rk))
            @assertEqual(testModel%evaluateTermGroup(3,testVarCont),real([2.0,4.0,6.0,8.0,10.0],kind=rk))
            @assertEqual(testModel%evaluateTermGroup(4,testVarCont),real([2.0,212.0,786.0,1784.0,10.0],kind=rk))

            @assertTrue(testModel%isAssembled())

        end if

        call testPETScController%finalize()

    end subroutine test_basic_model

    module function testCalculate(this,inputArray,indices) result(output)

        class(testDerivation)               ,intent(inout) :: this
        type(realArray)       ,dimension(:) ,intent(in) :: inputArray 
        integer(ik)           ,dimension(:) ,intent(in) :: indices
        real(rk) ,allocatable ,dimension(:)             :: output

        output = inputArray(indices(1))%entry * inputArray(indices(2))%entry

    end function testCalculate

    pure function testMapping(inputArray) result(output)

            integer(ik)    ,dimension(:)        ,intent(in) :: inputArray 
            type(intArray) ,allocatable ,dimension(:)       :: output

            allocate(output(size(inputArray)))

            allocate(output(1)%entry(2))
            output(1)%entry(1) = inputArray(1) - 1
            output(1)%entry(2) = inputArray(1) + 1

            if (size(inputArray) > 1) then 
                allocate(output(2)%entry(1))
                output(2)%entry(1) = inputArray(2)
                allocate(output(3)%entry(1))
                output(3)%entry(1) = inputArray(3)
            end if


        end function testMapping

end module test_model

