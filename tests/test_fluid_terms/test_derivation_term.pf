!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_derivation_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use support_functions
    use mpi_controller_class
    use modelbound_data_varlike_class
    use model_surrogate_class
    use derivation_explicit_term_class

    implicit none

    type ,extends(derivation) ,public :: testDerivation 

        contains 

        procedure ,public :: calculate => testCalculate

    end type testDerivation

    type ,extends(modelSurrogate) ,public :: dummyModel 

    end type dummyModel


contains

    @test( npes=[8])
    subroutine test_deriv_term(this)
    
        type(partition) :: testPart
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived ,testMBList
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(1) :: cRules
        type(calculationRule) ,dimension(1) :: mbRules
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(modelboundDataVarlike) :: testMBData
        type(testDerivation) :: testDeriv
        type(dummyModel) :: dummyM
        type(DerivationTerm) :: testTerm

        integer(ik) :: i 
        real(rk) :: minH

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),1,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call testListDerived%init()

        call testListDerived%addVar("p")

        call testIndexing%init(testPart,testGrid,testList)

        call testDeriv%makeDefined()

        call cRules(1)%init()
        call mbRules(1)%init(testDeriv,[stringArray("u")])

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call testMBList%init()

        call testMBList%addVar("mbvar")

        call testMBData%init(testMBList,mbRules,testPart,testIndexing,1,testVarCont1,testController%getWorldRank())

        
        call testTerm%init(testGrid,testPart,testController%getWorldRank(),"n",testVarCont1,testDeriv,[1],"mbvar")

        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)
        testVarCont1%variables(2)%entry = real([1,2,3,4,5],kind=rk)
        testVarCont1%variables(3)%entry = real([3,2,3,1,2],kind=rk)

        call testMBData%update(dummyM,testVarCont1)

        call testTerm%update(testVarCont1,testMBData)

        minH = testPart%getMinHAtInd(testController%getWorldRank()+1)
        allocate(checkVec(5))
        checkVec = 0
        if (minH == 1) then 

            checkVec = 4 * testVarCont1%variables(1)%entry * testVarCont1%variables(2)%entry 

        end if
        testVec = testTerm%evaluate(testVarCont1)
        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_deriv_term

    module function testCalculate(this,inputArray,indices) result(output)

        class(testDerivation)               ,intent(inout) :: this
        type(realArray)       ,dimension(:) ,intent(in) :: inputArray 
        integer(ik)           ,dimension(:) ,intent(in) :: indices
        real(rk) ,allocatable ,dimension(:)             :: output

        output = 2*inputArray(indices(1))%entry 

    end function testCalculate

end module test_derivation_term

