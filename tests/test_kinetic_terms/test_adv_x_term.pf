!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_adv_x_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use matrix_term_abstract_class
    use support_functions
    use geometry_class
    use mpi_controller_class
    use initialization_support
    use general_mat_term_class
    use multiplicative_stencil_generator_class
    use multiplicative_generator_core_class
    use uwc_diff_stencil_gen_class

    implicit none

contains

    @test( npes=[8])
    subroutine test_adv_term(this)
    
        type(Partition) :: testPart
        class(MpiTestMethod), intent(inout) :: this
        type(Grid) :: testGrid
        type(VariableList) :: testList,testListDerived
        type(Indexing) :: testIndexing
        type(VariableContainer) :: testVarCont1
        type(CalculationRule) ,dimension(0) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(Geometry) :: testGeometry
        type(MPIController) :: testController 
        type(StencilTemplate) :: templateObj 
        type(MultiplicativeStencilGen) :: stencilGen
        type(MultiplicativeGeneratorCore) ,allocatable :: stencilCore
        type(UWCDiffStencilValGenerator) :: xStencilGen
        type(CoordProfiles) :: cProfs

        integer(ik) :: i ,minH 
        real(rk) ,allocatable ,dimension(:) :: xArr ,vArr
        real(rk) :: minXVal, maxXVal ,realI

        type(RealArray) ,dimension(2) :: hVals
        call testPart%initSimplePartition(4,2,12,4)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),3,0)

        call testList%init()
        call testList%addVar("f",.true.)

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call testGeometry%init(real([(1.0d0,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk))

        call xStencilGen%init(testPart,testController%getWorldRank()&
                            ,real([(1,i=1,12)],kind=rk),1/(testGeometry%getCellWidths()*testGeometry%getJacobianCentre()),&
                            testGeometry%getLinInterp())
        call templateObj%defaultStencil%init(xStencil=[-1,0,1],hStencil=[-1,1],mapToDist=.true.)
        templateObj%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        allocate(stencilCore)
        call stencilCore%init(testGrid,testPart,testController%getWorldRank(),templateObj%rowCoords)

        templateObj%fixedStencil = .true.
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1)

        if (minH == 1) then 
            hVals(1)%entry = [real(1,kind=rk)/3]
            hVals(2)%entry = [real(1,kind=rk),real(2,kind=rk)/5]
        else
            hVals(1)%entry = [real(2,kind=rk)/3,real(3,kind=rk)/7]
            hVals(2)%entry = [real(3,kind=rk)/5]
        end if
        call stencilGen%init(stencilCore,initXVals=xStencilGen%calculate(testVarCont1),&
                                        initHVals=hVals,&
                                        initVVals=jaggedArray(reshape(real([(1,i=1,3)],kind=rk),[1,3])))

        allocate(templateObj%stencilGen,source=stencilGen)
        templateObj%fixedStencil = .true.
        
        cProfs%vProfile = - testGrid%getVGrid()
        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","f",testVarCont1,templateObj,&
                           coordProfile=cProfs)

        call testTerm%calculateValues(testVarCont1)

        xArr = real([1,2,3,4,5],kind=rk)
        vArr = real([1,1,1],kind=rk)
        do i = 1,4
            call setDistHarmonic(testVarCont1%variables(1)%entry,i,xArr,vArr)
        end do

        testVec = testTerm%evaluate(testVarCont1)
        minXVal = real(1,kind=rk)
        maxXVal = minXVal
        vArr = real([1,2,3],kind=rk)
        if (testPart%getMinXAtInd(testController%getWorldRank()+1) == 1) minXVal = real(2.5d00,kind=rk)
        if (testPart%getMaxXAtInd(testController%getWorldRank()+1) == 12) maxXVal = -real(3.5d00,kind=rk)
        allocate(checkVec,source=testVec)
        checkVec = 0 

        xArr = real([0.0d0,minXVal,1.0d0,maxXVal,0.0d0],kind=rk)

        do i = testPart%getMinHAtInd(testController%getWorldRank()+1),testPart%getMaxHAtInd(testController%getWorldRank()+1)
            realI = real(i,kind=rk)
            realI = (4*realI**2 - 4*realI - 1)/((2*realI - 3)*(2*realI + 1))
            if (i == 4) realI = 3.0d0/5.0d0
            call setDistHarmonic(checkVec,i,-realI*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)

    end subroutine test_adv_term

    @test( npes=[8])
    subroutine test_adv_term_nonuniform_periodic(this)
    
        type(Partition) :: testPart
        class(MpiTestMethod), intent(inout) :: this
        type(Grid) :: testGrid
        type(VariableList) :: testList,testListDerived
        type(Indexing) :: testIndexing
        type(VariableContainer) :: testVarCont1
        type(CalculationRule) ,dimension(0) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(Geometry) :: testGeometry
        type(MPIController) :: testController 
        real(rk) ,allocatable ,dimension(:) :: testGridWidths ,testXGrid 
        type(StencilTemplate) :: templateObj 
        type(MultiplicativeStencilGen) :: stencilGen
        type(MultiplicativeGeneratorCore) ,allocatable :: stencilCore
        type(UWCDiffStencilValGenerator) :: xStencilGen
        type(CoordProfiles) :: cProfs

        integer(ik) :: i ,minX ,minH

        real(rk) ,allocatable ,dimension(:) :: xArr ,vArr
        real(rk) :: realI ,linDiff
        type(RealArray) ,dimension(2) :: hVals

        call testPart%initSimplePartition(4,2,12,4)
        call testController%init(4,2)

        testGridWidths = real([(0.3d0*1.2d00**i,i=1,12)],kind=rk)
        allocate(testXGrid(12))

        testXGrid(1) = testGridWidths(1)/2 
        do i = 2,12
            testXGrid(i) = testXGrid(i-1) + (testGridWidths(i-1)+testGridWidths(i))/2.0d0 
        end do

        call testGrid%init(testXGrid,real([(i,i=1,3)],kind=rk),3,0)

        call testList%init()
        call testList%addVar("f",.true.)

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList,xHaloWidth=1)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call testGeometry%init(testGridWidths,real([(1,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk),periodicGrid=.true.)

        call xStencilGen%init(testPart,testController%getWorldRank()&
                            ,real([(1,i=1,12)],kind=rk),1/(testGeometry%getCellWidths()*testGeometry%getJacobianCentre()),&
                            testGeometry%getLinInterp(),xPeriodic=.true.)
        call templateObj%defaultStencil%init(xStencil=[-1,0,1],hStencil=[-1,1],mapToDist=.true.,xPeriodic=.true.)
        templateObj%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        allocate(stencilCore)
        call stencilCore%init(testGrid,testPart,testController%getWorldRank(),templateObj%rowCoords)

        templateObj%fixedStencil = .true.
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1)

        if (minH == 1) then 
            hVals(1)%entry = [real(1,kind=rk)/3]
            hVals(2)%entry = [real(1,kind=rk),real(2,kind=rk)/5]
        else
            hVals(1)%entry = [real(2,kind=rk)/3,real(3,kind=rk)/7]
            hVals(2)%entry = [real(3,kind=rk)/5]
        end if
        call stencilGen%init(stencilCore,initXVals=xStencilGen%calculate(testVarCont1),&
                                        initHVals=hVals,&
                                        initVVals=jaggedArray(reshape(real([(1,i=1,3)],kind=rk),[1,3])))

        allocate(templateObj%stencilGen,source=stencilGen)
        templateObj%fixedStencil = .true.
        
        cProfs%vProfile = - testGrid%getVGrid()
        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","f",testVarCont1,templateObj,&
                           coordProfile=cProfs)

        call testTerm%calculateValues(testVarCont1)

        xArr = real([1,2,3,4,5],kind=rk)
        vArr = real([1,1,1],kind=rk)
        do i = 1,4
            call setDistHarmonic(testVarCont1%variables(1)%entry,i,xArr,vArr)
        end do

        testVec = testTerm%evaluate(testVarCont1)
        vArr = real([1,2,3],kind=rk)
        allocate(checkVec,source=testVec)
        checkVec = 0 
        minX = testPart%getMinXAtInd(testController%getWorldRank()+1)
        xArr = real([0.0d0,1.0d0,1.0d0,1.0d0,0.0d0],kind=rk)
        linDiff = 1.2d00**11/(1.2d00**11+1d00) - 1.0d0/2.2d00 
        if (minX == 1) xArr = real([0.0d0,1.0d0-linDiff,1.0d0,1.0d0,0.0d0],kind=rk)
        if (testPart%getMaxXAtInd(testController%getWorldRank()+1) == 12) &
        xArr = real([0.0d0,1.0d0,1.0d0,1.0d0+linDiff,0.0d0],kind=rk)

        xArr = xArr/&
        [1.d0,testGridWidths(minX),testGridWidths(minX+1),testGridWidths(minX+2),1.0d0]
        do i = testPart%getMinHAtInd(testController%getWorldRank()+1),testPart%getMaxHAtInd(testController%getWorldRank()+1)
            realI = real(i,kind=rk)
            realI = (4*realI**2 - 4*realI - 1)/((2*realI - 3)*(2*realI + 1))
            if (i == 4) realI = 3.0d0/5.0d0
            call setDistHarmonic(checkVec,i,-realI*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)

    end subroutine test_adv_term_nonuniform_periodic

end module test_adv_x_term

