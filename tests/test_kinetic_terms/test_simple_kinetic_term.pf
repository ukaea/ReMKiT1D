!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_simple_kinetic_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use matrix_term_abstract_class
    use support_functions
    use mpi_controller_class
    use modelbound_data_varlike_class
    use model_surrogate_class
    use initialization_support
    use general_mat_term_class

    implicit none

    type ,extends(derivation) ,public :: testDerivation 

        contains 

        procedure ,public :: calculate => testCalculate

    end type testDerivation

    type ,extends(modelSurrogate) ,public :: dummyModel 

    end type dummyModel


contains

    @test( npes=[8])
    subroutine test_s_kinetic_term(this)
    
        type(partition) :: testPart
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(1) :: cRules
        type(GeneralMatrixTerm) :: testTerm ,testTerm2
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(CoordProfiles) :: cProfs
        type(StencilTemplate) :: testTemplate ,testTemplate2
        type(VarData) :: vData

        integer(ik) :: i 
        real(rk) ,allocatable ,dimension(:) :: xArr ,vArr ,hArr

        integer(ik) ,dimension(2) :: locHs


        call testPart%initSimplePartition(4,2,12,4)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),3,0)

        call testList%init()
        call testList%addVar("f",.true.)
        call testList%addVar("u")

        call testListDerived%init()

        call testListDerived%addVar("p")

        call testIndexing%init(testPart,testGrid,testList)

        call cRules(1)%init()

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())
        locHs = [testPart%getMinHAtInd(testController%getWorldRank()+1),testPart%getMaxHAtInd(testController%getWorldRank()+1)]
        hArr=real([2,3,3,4],kind=rk)

        call testTemplate%defaultStencil%init(mapToDist=.true.)
        testTemplate%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        vData%rowVars = [stringArray("f"),stringArray("p")]
        vData%rowVarPowers = [2.0d0,-1.0d0]
        testTemplate%fixedStencil = .true.
        cProfs%hProfile = hArr 
        cProfs%vProfile = real([1,2,3],kind=rk)

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","f",testVarCont1,testTemplate,&
                            vData=vData,coordProfile=cProfs)

        xArr = real([1,2,3,4,5],kind=rk)
        vArr = real([1,1,1],kind=rk)
        do i = 1,4
            call setDistHarmonic(testVarCont1%variables(1)%entry,i,xArr,vArr)
        end do

        testVarCont1%variables(2)%entry = real([1,2,3,4,5],kind=rk)
        testVarCont1%variables(3)%entry = real([3,2,3,1,2],kind=rk)

        call testTerm%calculateValues(testVarCont1)
        xArr = xArr ** 3 /testVarCont1%variables(3)%entry
        xArr(1) = 0
        xArr(5) = 0
        vArr = real([1,2,3],kind=rk)

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec,source=testVec)
        checkVec = 0 
        do i = 1,2 
            call setDistHarmonic(checkVec,locHs(i),hArr(locHs(i))*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
        call testTemplate2%defaultStencil%init()
        testTemplate2%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        testTemplate2%fixedStencil = .true.

        call testTerm2%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","u",testVarCont1,testTemplate2,&
                            vData=vData,coordProfile=cProfs)

        call testTerm2%calculateValues(testVarCont1)

        xArr = real([1,2,3,4,5],kind=rk) ** 2 * testVarCont1%variables(2)%entry/testVarCont1%variables(3)%entry
        xArr(1) = 0
        xArr(5) = 0
        vArr = real([1,2,3],kind=rk)

        testVec = testTerm2%evaluate(testVarCont1)
        checkVec = 0 
        do i = 1,2 
            call setDistHarmonic(checkVec,locHs(i),hArr(locHs(i))*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)
    end subroutine test_s_kinetic_term

    @test( npes=[8])
    subroutine test_s_term_modelboundData(this)
    
        type(partition) :: testPart
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived ,testMBList
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(1) :: cRules
        type(calculationRule) ,dimension(2) :: mbRules
        type(GeneralMatrixTerm) :: testTerm ,testTerm2
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(modelboundDataVarlike) :: testMBData
        type(testDerivation) :: testDeriv
        type(dummyModel) :: dummyM
        type(StencilTemplate) :: testTemplate ,testTemplate2 
        type(VarData) :: vData ,vData2
        type(CoordProfiles) :: cProfs

        integer(ik) :: i 
        real(rk) ,allocatable ,dimension(:) :: xArr ,vArr ,hArr

        integer(ik) ,dimension(2) :: locHs

        call testPart%initSimplePartition(4,2,12,4)
        call testController%init(4,2)

        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),3,0)

        call testList%init()
        call testList%addVar("f",.true.)
        call testList%addVar("u")

        call testListDerived%init()

        call testListDerived%addVar("p")

        call testIndexing%init(testPart,testGrid,testList)

        call testDeriv%makeDefined()

        call cRules(1)%init()
        call mbRules(1)%init(testDeriv,[stringArray("u")])
        call mbRules(2)%init(testDeriv,[stringArray("f")])


        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call testMBList%init()

        call testMBList%addVar("mbvar")
        call testMBList%addVar("mbvar2",.true.)

        call testMBData%init(testMBList,mbRules,testPart,testIndexing,1,testVarCont1,testController%getWorldRank())

        locHs = [testPart%getMinHAtInd(testController%getWorldRank()+1),testPart%getMaxHAtInd(testController%getWorldRank()+1)]
        hArr=real([2,3,3,4],kind=rk)

        call testTemplate%defaultStencil%init(mapToDist=.true.)
        testTemplate%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        vData%rowVars = [stringArray("f"),stringArray("p")]
        vData%rowVarPowers = [2.0d0,-1.0d0]
        vData%modelboundRowVars = [StringArray("mbvar")]
        cProfs%hProfile = hArr 
        cProfs%vProfile = real([1,2,3],kind=rk)

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","f",testVarCont1,testTemplate,&
                            vData=vData,coordProfile=cProfs)

        xArr = real([1,2,3,4,5],kind=rk)
        vArr = real([1,2,3],kind=rk)
        do i = 1,4
            call setDistHarmonic(testVarCont1%variables(1)%entry,i,xArr,vArr)
        end do

        testVarCont1%variables(2)%entry = real([1,2,3,4,5],kind=rk)
        testVarCont1%variables(3)%entry = real([3,2,3,1,2],kind=rk)

        call testMBData%update(dummyM,testVarCont1)

        call testTerm%update(testVarCont1,testMBData)

        call testTerm%calculateValues(testVarCont1)

        xArr = xArr ** 3 * 2*testVarCont1%variables(2)%entry/testVarCont1%variables(3)%entry
        xArr(1) = 0
        xArr(5) = 0
        vArr = real([1,2,3],kind=rk) ** 4

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec,source=testVec)

        checkVec = 0 
        do i = 1,2 
            call setDistHarmonic(checkVec,locHs(i),hArr(locHs(i))*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)

        call testTemplate2%defaultStencil%init()
        testTemplate2%rowCoords = allCombinations([IntArray([(i,i=1,12)]),IntArray([1,2,3,4]),IntArray([(i,i=1,3)])])
        vData2%rowVars = [stringArray("f"),stringArray("p")]
        vData2%rowVarPowers = [2.0d0,-1.0d0]
        vData2%modelboundRowVars = [StringArray("mbvar2")]

        call testTerm2%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"f","u",testVarCont1,testTemplate2,&
                            vData=vData2,coordProfile=cProfs)
        
        call testTerm2%update(testVarCont1,testMBData)

        call testTerm2%calculateValues(testVarCont1)

        xArr = real([1,2,3,4,5],kind=rk) ** 3 * 2* testVarCont1%variables(2)%entry/testVarCont1%variables(3)%entry
        xArr(1) = 0
        xArr(5) = 0
        vArr = real([1,2,3],kind=rk) ** 4

        testVec = testTerm2%evaluate(testVarCont1)

        checkVec = 0 
        do i = 1,2 
            call setDistHarmonic(checkVec,locHs(i),hArr(locHs(i))*xArr,vArr)
        end do

        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_s_term_modelboundData

    module function testCalculate(this,inputArray,indices) result(output)

        class(testDerivation)               ,intent(inout) :: this
        type(realArray)       ,dimension(:) ,intent(in) :: inputArray 
        integer(ik)           ,dimension(:) ,intent(in) :: indices
        real(rk) ,allocatable ,dimension(:)             :: output

        output = 2*inputArray(indices(1))%entry 

    end function testCalculate

end module test_simple_kinetic_term

