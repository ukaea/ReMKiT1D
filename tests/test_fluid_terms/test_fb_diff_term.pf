!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_fb_diff_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use matrix_term_abstract_class
    use support_functions
    use mpi_controller_class
    use modelbound_data_varlike_class
    use model_surrogate_class
    use physical_constants
    use fb_diff_stencil_gen_class
    use general_mat_term_class
    use stencil_class

    implicit none

    type ,extends(modelSurrogate) ,public :: dummyModel 

    end type dummyModel


contains

    @test( npes=[8])
    subroutine test_fb_diff(this)
    
        type(partition) :: testPart
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(1) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(VarData) :: vData
        type(FBDiffStencilValGenerator) :: stencilGen 
        type(StencilTemplate) :: testTemplate

        integer(ik) :: i 
        integer(ik) :: minX ,maxX ,minH

        real(rk) ,allocatable ,dimension(:) :: innerJ ,outerJ
        integer(ik) ,allocatable ,dimension(:,:) :: rowCoords

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        
        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),1,0)
        outerJ = real([(i,i=1,12)],kind=rk)
        innerJ = outerJ
        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call testListDerived%init()

        call testListDerived%addVar("p")

        call testIndexing%init(testPart,testGrid,testList)

        call cRules(1)%init()

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call stencilGen%init(testPart,testController%getWorldRank(),innerJ,outerJ)
        vData%rowVarPowers = [2.0d0,-1.0d0]
        vData%rowVars = [stringArray("n"),stringArray("p")]

        allocate(testTemplate%stencilGen,source = stencilGen)

        allocate(rowCoords(1,12))
        rowCoords(1,:) = [(i,i=1,12)]
        testTemplate%rowCoords = rowCoords
        testTemplate%fixedStencil = .true.
        call testTemplate%defaultStencil%init(xStencil=[0,1])

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),"n","u",testVarCont1,testTemplate,vData)
        
        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)
        testVarCont1%variables(2)%entry = real([1,2,3,4,5],kind=rk)
        testVarCont1%variables(3)%entry = real([3,2,3,1,2],kind=rk)

        call testTerm%calculateValues(testVarCont1)

        minX = testPart%getMinXAtInd(testController%getWorldRank()+1)
        maxX = testPart%getMaxXAtInd(testController%getWorldRank()+1)
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1)

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec(0:4))
        checkVec = 0 
        if (minH == 1) then 

            checkVec = testVarCont1%variables(1)%entry ** 2 /testVarCont1%variables(3)%entry &
            * real([0,minX,minX+1,minX+2,0],kind=rk)
            if (maxX < 12) then 
                checkVec(1:3) = checkVec(1:3) * (innerJ(minX+1:maxX+1)*testVarCont1%variables(2)%entry(2:4)&
                -innerJ(minX:maxX)*testVarCont1%variables(2)%entry(1:3))
            else 
                checkVec(1:2) = checkVec(1:2) * (innerJ(minX+1:maxX)*testVarCont1%variables(2)%entry(2:3)&
                -innerJ(minX:maxX-1)*testVarCont1%variables(2)%entry(1:2))
                checkVec(3) = checkVec(3) * (-innerJ(maxX)*testVarCont1%variables(2)%entry(3))
            end if
        end if
        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_fb_diff

end module test_fb_diff_term

