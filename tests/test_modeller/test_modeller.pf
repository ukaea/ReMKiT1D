
!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_modeller

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use term_abstract_class
    use test_matrix_term_class
    use matrix_term_abstract_class
    use support_functions
    use test_explicit_term_class
    use test_operator_class
    use model_class
    use mpi_controller_class
    use petsc_controller_class
    use modeller_class
    use explicit_rk_integrator_class
    use implicit_PicardBDE_integrator_class
    use composite_integrator_class
    use status_printing
    use composite_manipulator_class
    use group_evaluator_class
    use term_evaluator_class
    use cvode_integrator_class 

    implicit none


contains

    @test( npes=[8])
    subroutine test_modeller_RK_int(this)

        class (MpiTestMethod), intent(inout) :: this
        type(MPIController) :: testMPIController 
        type(partition) :: testPart
        type(grid) :: testGrid
        type(variableList) :: testList ,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont
        type(calculationRule) ,dimension(1) :: cRules
        class(term) ,allocatable :: genTerm
        type(testExplicitTerm) :: testTerm
        class(model) ,allocatable :: testModel
        type(testOperator) :: testOp
        type(modeller) :: testModeller
        type(explicitRKIntegrator) :: testIntegrator

        integer(ik) :: i

        call testMPIController%init(8,1)

        call testPart%initSimplePartition(8,1,24,1)
        call testGrid%init(real([(i,i=1,24)],kind=rk),real([(i,i=1,5)],kind=rk),0,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call preparePrinter(testMPIController%getWorldRank())

        call testListDerived%init()
        call testListDerived%addVar("time")

        call cRules(1)%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont%init(testList,testListDerived,cRules,testIndexing,testPart,1,testMPIController%getWorldRank())
        allocate(testModel)
        call testModel%init(0,1,0,1)

        testVarCont%variables(1)%entry = 1.0d0
        testVarCont%variables(2)%entry = 2.0d0
        testVarCont%variables(3)%entry = 0.0d0


        call testTerm%init("n",testVarCont)

        call testTerm%setEvolvedVar("n")
        call testOP%makeDefined()
        call testTerm%setOperator(testOp)

        allocate(genTerm,source=testTerm)

        call testModel%addGeneralTerm(genTerm,[1],"1")

        call testModeller%init(1,testVarCont,testMPIController)
        
        call testModeller%addModel(testModel)

        call testModeller%assemble()

        @assertTrue(testModeller%isAssembled())

        call testIntegrator%init(modelList=[1],termGroups=[intArray([1])],order=4,evolvesTimeVar=.true.,initialTimestep=0.1d0)
        call testIntegrator%setCommunicationNeeded(.false.)
        call testIntegrator%setUpdateRules([logicalArray([.false.])])

        @assertEqual(testModeller%getCurrentTime(),0.d0)
        call testModeller%setIntegrator(testIntegrator)
        call testModeller%integrate()

        call testModeller%copyVarValuesTo(testVarCont)

        call assertEqual(testVarCont%variables(3)%entry(1),0.1d0)
        call assertEqual(testVarCont%variables(1)%entry(1),1.2214d0)
        call assertEqual(testVarCont%variables(2)%entry(1),2.0d0)



    end subroutine test_modeller_RK_int

    @test( npes=[8])
    subroutine test_modeller_BDE_int(this)

        class (MpiTestMethod), intent(inout) :: this
        type(MPIController) :: testMPIController 
        type(partition) :: testPart
        type(grid) :: testGrid
        type(variableList) :: testList ,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont
        type(calculationRule) ,dimension(3) :: cRules
        class(matrixTerm) ,allocatable :: matTerm
        type(testMatrixTerm) :: testTerm ,testTerm2 ,testTerm3
        class(model) ,allocatable :: testModel
        type(modeller) :: testModeller
        type(picardBDEIntegrator) :: testIntegrator
        type(petscController) :: testPETScController 
        type(solverOptions) :: solOptions 
        type(CompositeManipulator) :: testManipulator
        type(GroupEvaluator) :: testEvaluator
        type(TermEvaluator) :: testEvaluator2, testEvaluatorAccumulate

        integer(ik) :: i ,xOffset

        call testMPIController%init(8,1)
        call preparePrinter(testMPIController%getWorldRank())

        call testPart%initSimplePartition(8,1,24,1)
        call testGrid%init(real([(i,i=1,24)],kind=rk),real([(i,i=1,5)],kind=rk),0,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")
        call testList%addVar("n2",isStationary=.true.)

        call testListDerived%init()
        call testListDerived%addVar("time")
        call testListDerived%addVar("eval")
        call testListDerived%addVar("eval2")

        call cRules(1)%init()
        call cRules(2)%init()
        call cRules(3)%init()

        call testIndexing%init(testPart,testGrid,testList)
        solOptions%kspSolverType = "bcgs"
        solOptions%hyprePC = "euclid"
        solOptions%petscOptions = ""
        call testPETScController%init(testIndexing,testMPIController,solOptions) 


        call testVarCont%init(testList,testListDerived,cRules,testIndexing,testPart,1,testMPIController%getWorldRank())
        allocate(testModel)
        call testModel%init(3,0,2,1)

        testVarCont%variables(1)%entry = 1.0d0
        testVarCont%variables(2)%entry = 1.0d0
        testVarCont%variables(3)%entry = 1.0d0
        testVarCont%variables(4)%entry = 0.0d0


        call testTerm%makeDefined()
        xOffset = testMPIController%getWorldRank()*3
        call testTerm%setEvolvedAndImplicitVar("n","u",testVarCont)
        call testTerm%setReqVars([stringArray("n"),stringArray("u")],[stringArray("u")],testVarCont)
        call testTerm%initRowData(reshape([(xOffset+i,i=1,3)],[1,3]),testMapping,testIndexing)

        allocate(matTerm,source=testTerm)
        call testModel%addImplicitTerm(matTerm,[2],[1],"1")

        call testTerm2%makeDefined()
        xOffset = testMPIController%getWorldRank()*3
        call testTerm2%setEvolvedAndImplicitVar("n2","u",testVarCont)
        call testTerm2%setReqVars([stringArray("n"),stringArray("u")],[stringArray("u")],testVarCont)
        call testTerm2%initRowData(reshape([(xOffset+i,i=1,3)],[1,3]),testMapping,testIndexing)

        allocate(matTerm,source=testTerm2)
        call testModel%addImplicitTerm(matTerm,[1],[1],"2")

        call testTerm3%makeDefined()
        xOffset = testMPIController%getWorldRank()*3
        call testTerm3%setEvolvedAndImplicitVar("n2","n2",testVarCont)
        call testTerm3%setReqVars([stringArray("u"),stringArray("u")],[stringArray("u")],testVarCont)
        call testTerm3%initRowData(reshape([(xOffset+i,i=1,3)],[1,3]),testMapping,testIndexing)

        allocate(matTerm,source=testTerm3)
        call testModel%addImplicitTerm(matTerm,[1],[1],"3")

        call testModeller%init(1,testVarCont,testMPIController,testPETScController)

        call testManipulator%init(3)

        call testEvaluator%init(5,1,2)
        call testEvaluator2%init(6,[1],[StringArray("1")])
        call testEvaluatorAccumulate%init(6,[1],[StringArray("1")],.true.)

        call testManipulator%addManipulator(testEvaluator,0)
        call testManipulator%addManipulator(testEvaluator2,0)
        call testManipulator%addManipulator(testEvaluatorAccumulate,4)

        call testModeller%setManipulator(testManipulator)
        
        call testModeller%addModel(testModel)

        call testModeller%calculateIdentityMat(testIndexing)

        call testModeller%assemble(withIdentityMat=.true.)

        @assertTrue(testModeller%isAssembled())

        call testIntegrator%init(testIndexing,testMPIController%getWorldRank(),convergenceIndices=[1,3],&
        modelList=[1],termGroups=[intArray([1,2])],evolvesTimeVar=.true.,initialTimestep=0.1d0)
        call testIntegrator%setCommunicationNeeded(.false.)
        call testIntegrator%setUpdateRules([logicalArray([.false.])])
        call testModeller%setIntegrator(testIntegrator)
        call testModeller%integrate()

        call testModeller%copyVarValuesTo(testVarCont)

        call assertEqual(testVarCont%variables(4)%entry(1),0.1d0)
        call assertEqual(testVarCont%variables(1)%entry(1),1d0/0.9d0,tolerance=1d-12)
        call assertEqual(testVarCont%variables(2)%entry(1),1.0d0)
        call assertEqual(testVarCont%variables(3)%entry(1),-1d0/0.9d0,tolerance=1d-12)
        call assertEqual(testVarCont%variables(5)%entry,testModeller%evaluateModelTermGroup(1,2,testVarCont),tolerance=1d-12)
        call assertEqual(testVarCont%variables(6)%entry,testModeller%evaluateModelTermGroup(1,2,testVarCont),tolerance=1d-12)

        call testModeller%callManipulator(4)

        call testModeller%copyVarValuesTo(testVarCont)
        call assertEqual(testVarCont%variables(6)%entry,2*testModeller%evaluateModelTermGroup(1,2,testVarCont),tolerance=1d-12)

        call testPETScController%finalize()

    end subroutine test_modeller_BDE_int

    @test( npes=[8])
    subroutine test_modeller_composite_int(this)

        class (MpiTestMethod), intent(inout) :: this
        type(MPIController) :: testMPIController 
        type(partition) :: testPart
        type(grid) :: testGrid
        type(variableList) :: testList ,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont
        type(calculationRule) ,dimension(1) :: cRules
        class(term) ,allocatable :: genTerm
        class(matrixTerm) ,allocatable :: matTerm
        type(testExplicitTerm) :: testTermExp
        type(testMatrixTerm) :: testTermMat
        class(model) ,allocatable :: testModel
        type(testOperator) :: testOp
        type(modeller) :: testModeller
        type(explicitRKIntegrator) :: testIntegratorRK
        type(picardBDEIntegrator) :: testIntegratorBDE
        type(petscController) :: testPETScController 
        type(solverOptions) :: solOptions 
        type(compositeIntegrator) :: testIntegratorComp
        type(integratorCallStep) ,dimension(2) :: testStages



        integer(ik) :: i,xOffset

        call testMPIController%init(8,1)
        call preparePrinter(testMPIController%getWorldRank())

        call testPart%initSimplePartition(8,1,24,1)
        call testGrid%init(real([(i,i=1,24)],kind=rk),real([(i,i=1,5)],kind=rk),0,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call testListDerived%init()
        call testListDerived%addVar("time")

        call cRules(1)%init()

        call testIndexing%init(testPart,testGrid,testList)
        solOptions%kspSolverType = "bcgs"
        solOptions%hyprePC = "euclid"
        solOptions%petscOptions = ""
        call testPETScController%init(testIndexing,testMPIController,solOptions) 
        call testVarCont%init(testList,testListDerived,cRules,testIndexing,testPart,1,testMPIController%getWorldRank())
        allocate(testModel)
        call testModel%init(1,1,1,2)

        testVarCont%variables(1)%entry = 1.0d0
        testVarCont%variables(2)%entry = 1.0d0
        testVarCont%variables(3)%entry = 0.0d0


        call testTermExp%init("n",testVarCont)

        call testTermExp%setEvolvedVar("n")
        call testOP%makeDefined()
        call testTermExp%setOperator(testOp)

        allocate(genTerm,source=testTermExp)

        call testModel%addGeneralTerm(genTerm,[1],"3")

        call testTermMat%makeDefined()
        xOffset = testMPIController%getWorldRank()*3
        call testTermMat%setEvolvedAndImplicitVar("n","u",testVarCont)
        call testTermMat%setReqVars([stringArray("n"),stringArray("u")],[stringArray("u")],testVarCont)
        call testTermMAt%initRowData(reshape([(xOffset+i,i=1,3)],[1,3]),testMapping,testIndexing)

        allocate(matTerm,source=testTermMat)
        call testModel%addImplicitTerm(matTerm,[1],[2],"4")

        call testModeller%init(1,testVarCont,testMPIController,testPETScController)
        
        call testModeller%addModel(testModel)

        call testModeller%calculateIdentityMat(testIndexing)

        call testModeller%assemble(withIdentityMat=.true.)

        call testIntegratorBDE%init(testIndexing,testMPIController%getWorldRank())
        call testIntegratorRK%init(order=1)

        call testIntegratorComp%init(0.0d0,0.1d0,2) 
        call testIntegratorComp%addIntegrator(testIntegratorRK)

        call testIntegratorComp%addIntegrator(testIntegratorBDE)

        testStages(1)%integratorIndex = 1
        testStages(1)%modelIndices = [1]
        testStages(1)%groupIndices = [intArray([2])]
        testStages(1)%globalStepFraction = 1.0d0

        testStages(2)%integratorIndex = 2
        testStages(2)%modelIndices = [1]
        testStages(2)%groupIndices = [intArray([1])]
        testStages(2)%globalStepFraction = 1.0d0

        call testIntegratorComp%addIntegrationStage(testStages(1))
        call testIntegratorComp%addIntegrationStage(testStages(2))

        call testModeller%setIntegrator(testIntegratorComp)
        call testModeller%integrate()

        call testModeller%copyVarValuesTo(testVarCont)

        call assertEqual(testVarCont%variables(3)%entry(1),0.1d0)
        call assertEqual(testVarCont%variables(1)%entry(1),1.2d0/0.9d0,tolerance=1d-12)
        call assertEqual(testVarCont%variables(2)%entry(1),1.0d0)

        call testPETScController%finalize()


    end subroutine test_modeller_composite_int

    @test( npes=[8])
    subroutine test_modeller_CVODE_int(this)

        class (MpiTestMethod), intent(inout) :: this
        type(MPIController) :: testMPIController 
        type(partition) :: testPart
        type(grid) :: testGrid
        type(variableList) :: testList ,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont
        type(calculationRule) ,dimension(1) :: cRules
        class(term) ,allocatable :: genTerm
        type(testExplicitTerm) :: testTerm
        class(model) ,allocatable :: testModel
        type(testOperator) :: testOp
        type(modeller) :: testModeller
        type(CVODEIntegrator) :: testIntegrator
        type(CVODEOptions) :: testOptions

        integer(ik) :: i

        call testMPIController%init(8,1)

        call testPart%initSimplePartition(8,1,24,1)
        call testGrid%init(real([(i,i=1,24)],kind=rk),real([(i,i=1,5)],kind=rk),0,0)

        call testList%init()
        call testList%addVar("n")
        call testList%addVar("u")

        call preparePrinter(testMPIController%getWorldRank())

        call testListDerived%init()
        call testListDerived%addVar("time")

        call cRules(1)%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont%init(testList,testListDerived,cRules,testIndexing,testPart,1,testMPIController%getWorldRank())
        allocate(testModel)
        call testModel%init(0,1,0,1)

        testVarCont%variables(1)%entry = 1.0d0
        testVarCont%variables(2)%entry = 2.0d0
        testVarCont%variables(3)%entry = 0.0d0


        call testTerm%init("n",testVarCont)

        call testTerm%setEvolvedVar("n")
        call testOP%makeDefined()
        call testTerm%setOperator(testOp)

        allocate(genTerm,source=testTerm)

        call testModel%addGeneralTerm(genTerm,[1],"1")

        call testModeller%init(1,testVarCont,testMPIController)
        
        call testModeller%addModel(testModel)

        call testModeller%assemble()

        @assertTrue(testModeller%isAssembled())

        testOptions%reltol = 1d-12
        testOptions%abstol = 1d-14 
        testOptions%bbdmukeep = 0
        testOptions%bbdmlkeep = 0
        testOptions%bbdmldq = 0
        testOptions%bbdmudq = 0
        testOptions%maxRestarts = 50

        call testIntegrator%init(testMPIController,testOptions,modelList=[1],termGroups=[intArray([1])],&
                                evolvesTimeVar=.true.,initialTimestep=0.1d0)
        call testIntegrator%setCommunicationNeeded(.false.)
        call testIntegrator%setUpdateRules([logicalArray([.false.])])

        @assertEqual(testModeller%getCurrentTime(),0.d0)
        call testModeller%setIntegrator(testIntegrator)
        call testModeller%integrate()
        call testModeller%integrate()

        call testModeller%copyVarValuesTo(testVarCont)

        call assertEqual(testVarCont%variables(3)%entry(1),0.2d0)
        call assertEqual(testVarCont%variables(1)%entry(1),1.49182469764d0,tolerance=1d-10)
        call assertEqual(testVarCont%variables(2)%entry(1),2.0d0)



    end subroutine test_modeller_CVODE_int


    pure function testMapping(inputArray) result(output)

            integer(ik)    ,dimension(:)        ,intent(in) :: inputArray 
            type(intArray) ,allocatable ,dimension(:)       :: output

            allocate(output(size(inputArray)))

            allocate(output(1)%entry(1))
            output(1)%entry(1) = inputArray(1) 

        end function testMapping

end module test_modeller

