!-----------------------------------------------------------------------------------------------------------------------------------
! This file is part of ReMKiT1D.
!
! ReMKiT1D is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! ReMKiT1D is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with ReMKiT1D. If not, see <https://www.gnu.org/licenses/>. 
!
! Copyright 2023 United Kingdom Atomic Energy Authority (stefan.mijin@ukaea.uk)
module test_interp_term

    use pfunit
    use god_objects       ,only: object
    use data_kinds        ,only: ik, rk
    use partition_class
    use geometry_class
    use grid_class
    use variable_list_class
    use indexing_class
    use support_types 
    use variable_container_class 
    use derivation_abstract_class
    use matrix_term_abstract_class
    use support_functions
    use mpi_controller_class
    use modelbound_data_varlike_class
    use model_surrogate_class
    use physical_constants
    use interp_stencil_gen_class
    use general_mat_term_class
    use stencil_class

    implicit none

contains

    @test( npes=[8])
    subroutine test_interp_to_staggered(this)
    
        type(partition) :: testPart
        type(Geometry) :: testGeometry
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(0) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(InterpStencilGenerator) :: stencilGen
        type(StencilTemplate) :: testTemplate

        integer(ik) :: i 
        integer(ik) :: minX ,maxX ,minH

        real(rk) ,allocatable ,dimension(:) :: linInterp
        integer(ik) ,allocatable ,dimension(:,:) :: rowCoords

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        
        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),1,0)
        call testGeometry%init(real([(0.5d0*i,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk))
        call testList%init()
        call testList%addVar("n")
        call testList%addVar("n_interp")

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call stencilGen%init(testPart,testGeometry,testController%getWorldRank())

        allocate(testTemplate%stencilGen,source = stencilGen)

        allocate(rowCoords(1,11))
        rowCoords(1,:) = [(i,i=1,11)]
        testTemplate%rowCoords = rowCoords
        testTemplate%fixedStencil = .true.
        call testTemplate%defaultStencil%init(xStencil=[0,1])

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),&
                          "n_interp","n",testVarCont1,testTemplate)
        
        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)

        call testTerm%calculateValues(testVarCont1)

        minX = testPart%getMinXAtInd(testController%getWorldRank()+1)
        maxX = testPart%getMaxXAtInd(testController%getWorldRank()+1)
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1) 
        allocate(linInterp,source = testGeometry%getLinInterp())

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec(0:4))
        checkVec = 0
        if (minH == 1) then
            do i = 1,3
                checkVec(i) = testVarCont1%variables(1)%entry(i)*(1.0d0-linInterp(minX+i-1)) &
                + linInterp(minX+i-1) * testVarCont1%variables(1)%entry(i+1)
            end do

            if (maxX == 12) checkVec(3) = 0
        end if
        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_interp_to_staggered

    @test( npes=[8])
    subroutine test_interp_from_staggered(this)
    
        type(partition) :: testPart
        type(Geometry) :: testGeometry
        class (MpiTestMethod), intent(inout) :: this
        type(grid) :: testGrid
        type(variableList) :: testList,testListDerived
        type(indexing) :: testIndexing
        type(variableContainer) :: testVarCont1
        type(calculationRule) ,dimension(0) :: cRules
        type(GeneralMatrixTerm) :: testTerm 
        real(rk) ,allocatable ,dimension(:) :: testVec,checkVec
        type(MPIController) :: testController 
        type(InterpStencilGenerator) :: stencilGen 
        type(StencilTemplate) :: testTemplate

        integer(ik) :: i 
        integer(ik) :: minX ,maxX ,minH

        real(rk) ,allocatable ,dimension(:) :: linInterp
        integer(ik) ,allocatable ,dimension(:,:) :: rowCoords

        call testPart%initSimplePartition(4,2,12,2)
        call testController%init(4,2)

        
        call testGrid%init(real([(i,i=1,12)],kind=rk)-0.5d0,real([(i,i=1,3)],kind=rk),1,0)
        call testGeometry%init(real([(0.5d0*i,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk),real([(1,i=1,12)],kind=rk))
        call testList%init()
        call testList%addVar("n")
        call testList%addVar("n_interp")

        call testListDerived%init()

        call testIndexing%init(testPart,testGrid,testList)

        call testVarCont1%init(testList,testListDerived,cRules,testIndexing,testPart,1,testController%getWorldRank())

        call stencilGen%init(testPart,testGeometry,testController%getWorldRank(),staggeredGridMode=.true.)

        allocate(testTemplate%stencilGen,source = stencilGen)

        allocate(rowCoords(1,12))
        rowCoords(1,:) = [(i,i=1,12)]
        testTemplate%rowCoords = rowCoords
        testTemplate%fixedStencil = .true.
        call testTemplate%defaultStencil%init(xStencil=[-1,0])
        allocate(testTemplate%overridingStencilCoords(1,2))
        testTemplate%overridingStencilCoords(1,:) = [1,12]
        allocate(testTemplate%overridingStencils(2))
        call testTemplate%overridingStencils(1)%init(xStencil=[0,1])
        call testTemplate%overridingStencils(2)%init(xStencil=[-2,-1])

        call testTerm%init(testGrid,testPart,testIndexing,testController%getWorldRank(),&
                           "n_interp","n",testVarCont1,testTemplate)
        
        testVarCont1%variables(1)%entry = real([2,4,6,4,5],kind=rk)

        call testTerm%calculateValues(testVarCont1)

        minX = testPart%getMinXAtInd(testController%getWorldRank()+1)
        maxX = testPart%getMaxXAtInd(testController%getWorldRank()+1)
        minH = testPart%getMinHAtInd(testController%getWorldRank()+1) 
        allocate(linInterp,source = testGeometry%getLinInterp())

        testVec = testTerm%evaluate(testVarCont1)
        allocate(checkVec(0:4))
        checkVec = 0
        if (minH == 1) then
            do i = 1,3
                checkVec(i) = (testVarCont1%variables(1)%entry(i-1) + testVarCont1%variables(1)%entry(i))/2
            end do

            if (maxX == 12) checkVec(3) = testVarCont1%variables(1)%entry(2)*(1.0d0+6.0d0/11.d0) &
            -6.0d0/11.0d0 * testVarCont1%variables(1)%entry(1)

            if (minX == 1) checkVec(1) =  testVarCont1%variables(1)%entry(1)*1.25d0 &
            -0.25d0 * testVarCont1%variables(1)%entry(2)
    
        end if
        @assertEqual(testVec,checkVec,tolerance=1.d-14)
        
    end subroutine test_interp_from_staggered

end module test_interp_term

